axios.defaults.showLoader = !0; const isMobileAgent = void 0 !== window.orientation || -1 !== navigator.userAgent.indexOf("IEMobile"); let props, watch, methods; isMobileAgent ? (props = { flycart: null, flycartitems: null, flycartindicator: void 0, flywish: null, wishlistitems: null, wishindicator: void 0 }, watch = { fluid: function (t) { localStorage.fluid = t }, darkMode: function (t) { localStorage.darkMode = t } }, methods = { backToTop() { if (!document.querySelector(".up-btn")) { const t = document.createElement("div"), e = document.createElement("div"); t.classList.add("up-btn", "up-btn__hide"), document.body.append(t), t.append(e), window.addEventListener("scroll", (() => { var e; e = 400, document.documentElement.scrollTop >= e ? t.classList.remove("up-btn__hide") : t.classList.add("up-btn__hide") })), t.addEventListener("click", (() => { window.scrollTo({ top: 0, behavior: "smooth" }) })) } }, newsletterBox(t, e) { let a; a = !t || this.$refs.newsletterSubscribe.checked; var o = { subscribe: a, email: document.getElementById("newsletter-email").value }; axios({ url: e, params: o, method: "post" }).then((function (t) { let e, a = t.data.Result, o = t.data.ResultCategory, i = t.data.Showcategories; e = t.data.Success ? "info" : "danger", vm.$bvToast.toast(a, { variant: e, autoHideDelay: 3500, solid: !0 }), i && vm.displayPopup(o, "ModalNewsletterCategory") })) }, newsletterSubscribeCategory(t) { let e = document.getElementById("newsletter-category-method-form"), a = new FormData(e); axios({ url: t, method: "post", data: a }).then((function (t) { t.data.Success || alert(t.data.Message) })).catch((function (t) { alert(t) })) }, getPrivacyPreference(t) { axios({ url: t, method: "get" }).then((function (t) { vm.displayPopup(t.data.html, "ModalPrivacyPreference") })).catch((function (t) { alert(t) })) }, savePrivacyPreference(t) { let e = document.getElementById("frmPrivacyPreference"), a = new FormData(e); axios({ url: t, method: "post", data: a }).catch((function (t) { alert(t) })) }, displayPopup(t, e) { new Vue({ el: "#" + e, data: { template: null }, render: function (t) { return this.template ? this.template() : t("b-overlay", { attrs: { show: "true" } }) }, methods: { showModal: function () { this.$refs[e].show() } }, mounted: function () { this.template = Vue.compile(t).render, this.darkMode = vm.darkMode }, updated: function () { this.showModal() } }) }, displayBarNotification(t, e, a, o) { var i; i = "error" == a ? "danger" : "info", this.$bvToast.toast(t, { title: a, variant: i, href: e, autoHideDelay: o, solid: !0 }) }, deletecartitem: function (t) { return axios({ method: "post", baseURL: t }).then((function (t) { const e = t.data.sidebarshoppingcartmodel; vm.flycart = e, vm.flycartitems = e.Items, vm.flycartindicator = e.TotalProducts })).catch((function (t) { alert(t) })), !1 }, updateCompareProductsQty: function () { const t = AxiosCart.getCookie("Grand.CompareProduct"); if ("" !== t) { const e = t.split("|").filter(Boolean).length; this.compareProductsQty = e } else this.compareProductsQty = 0 }, updateSidebarShoppingCart: function (t) { axios({ baseURL: t, method: "get", data: null, headers: { Accept: "application/json", "Content-Type": "application/json" }, showLoader: !1 }).then((t => (this.flycart = t.data, this.flycartitems = t.data.Items, this.flycartindicator = t.data.TotalProducts, this.flycartfirstload = !1))) }, updateWishlist: function (t) { axios({ baseURL: t, method: "get", data: null, headers: { Accept: "application/json", "Content-Type": "application/json" }, showLoader: !1 }).then((t => (this.loader = !1, this.flywish = t.data, this.wishlistitems = t.data.Items, this.wishindicator = t.data.Items.length))) }, getCompareList: function (t) { this.loader = !0, axios({ baseURL: t, method: "get", params: { t: (new Date).getTime() }, data: null, headers: { Accept: "application/json", "Content-Type": "application/json" }, showLoader: !1 }).then((t => { this.loader = !1, this.compareproducts = t.data })) }, removeFromCompareList: function (t, e) { if (void 0 !== t) { const a = AxiosCart.getCookie("Grand.CompareProduct").replace(t, ""); AxiosCart.setCookie("Grand.CompareProduct", a), vm.compareproducts.Products.splice(e, 1) } else AxiosCart.setCookie("Grand.CompareProduct", ""), vm.compareproducts.Products.splice(0); this.updateCompareProductsQty() }, showModalOutOfStock: function () { this.$refs["out-of-stock"].show() }, productImage: function (t) { var e = t.target.parentElement.getAttribute("data-href"); function a(t, e) { for (var a = 0, o = t.length; a < o; a++)if (t[a] == e) return !0; return !1 } var o = function (t, e) { for (var o = document.querySelectorAll(e), i = t.parentNode; i && !a(o, i);)i = i.parentNode; return i }(t.target, ".product-box"); o.querySelectorAll(".main-product-img")[0].setAttribute("src", e) }, formSubmit() { vm.$refs.form.submit() }, formSubmitParam(e, observer) { e && observer && observer.validate().then((success => { if (success) { var submitter = e.target.querySelector('[type="submit"]'); eval(submitter.dataset.form) } })) }, isMobile: function () { return isMobileAgent }, attrchange: function (t, e) { var a, o = document.getElementById("product-details-form"), i = new FormData(o); a = vm.PopupQuickViewVueModal.ProductBundleModels.length > 0 ? vm.PopupQuickViewVueModal.Id : t, axios({ url: "/product/productdetails_attributechange?productId=" + a + "&loadPicture=" + e, data: i, method: "post", params: { product: a } }).then((function (t) { if (vm.PopupQuickViewVueModal.ProductBundleModels.length > 0) t.data.price && (vm.PopupQuickViewVueModal.ProductPrice.Price = t.data.price); else { if (t.data.price && (0 == vm.PopupQuickViewVueModal.ProductType ? null != vm.PopupQuickViewVueModal.ProductPrice.PriceWithDiscount ? vm.PopupQuickViewVueModal.ProductPrice.PriceWithDiscount = t.data.price : vm.PopupQuickViewVueModal.ProductPrice.Price = t.data.price : vm.PopupQuickViewVueModal.AssociatedProducts.find((t => t.Id === a)).ProductPrice.Price = t.data.price), t.data.sku && (vm.PopupQuickViewVueModal.Sku = t.data.sku), t.data.mpn && (vm.PopupQuickViewVueModal.Mpn = t.data.mpn), t.data.gtin && (vm.PopupQuickViewVueModal.Gtin = t.data.gtin), t.data.stockAvailability && (vm.PopupQuickViewVueModal.StockAvailability = t.data.stockAvailability), t.data.enabledattributemappingids) for (var e = 0; e < t.data.enabledattributemappingids.length; e++)document.querySelector("#product_attribute_label_" + t.data.enabledattributemappingids[e]).style.display = "table-cell", document.querySelector("#product_attribute_input_" + t.data.enabledattributemappingids[e]).style.display = "table-cell"; if (t.data.disabledattributemappingids) for (e = 0; e < t.data.disabledattributemappingids.length; e++)document.querySelector("#product_attribute_label_" + t.data.disabledattributemappingids[e]).style.display = "none", document.querySelector("#product_attribute_input_" + t.data.disabledattributemappingids[e]).style.display = "none"; null !== t.data.pictureDefaultSizeUrl && (vm.PopupQuickViewVueModal.DefaultPictureModel.ImageUrl = t.data.pictureDefaultSizeUrl) } })) }, uploadFile: function (t) { var e = new FormData, a = t.getAttribute("data-url"); e.append("image", qqfile.files[0]), axios.post(a, e, { headers: { "Content-Type": "multipart/form-data" } }).then((function (e) { if (e.data.success) { var a = e.data.message, o = e.data.downloadGuid, i = e.data.downloadUrl, r = document.querySelector(".download-file"), d = document.getElementById("download-message"); t.setAttribute("qq-button-id", o), document.querySelector(".hidden-upload-input").value = o, d.style.display = "block", d.classList.remove("alert-danger"), d.classList.add("alert-info"), d.innerText = a, r.style.display = "block", r.children[0].setAttribute("href", i) } else { a = e.data.message; (d = document.getElementById("download-message")).style.display = "block", d.classList.remove("alert-info"), d.classList.add("alert-danger"), d.innerText = a } })) }, warehouse_change_handler(t, e) { var a = new FormData; a.append("warehouseId", document.getElementById("WarehouseId").value), a.append("productId", t), axios({ url: e, data: a, method: "post" }).then((function (t) { t.data.stockAvailability && (vm.PopupQuickViewVueModal.StockAvailability = t.data.stockAvailability) })) }, formatDate(t) { var e = new Date(t), a = "" + (e.getMonth() + 1), o = "" + e.getDate(), i = e.getFullYear(); return a.length < 2 && (a = "0" + a), o.length < 2 && (o = "0" + o), [a, o, i].join("/") } }) : (props = { flycart: null, flycartitems: null, flycartindicator: void 0, flywish: null, wishlistitems: null, wishindicator: void 0, UpdatedShoppingCartItemId: null }, watch = { fluid: function (t) { localStorage.fluid = t }, darkMode: function (t) { localStorage.darkMode = t }, PopupQuickViewVueModal: function () { vm.getLinkedProductsQV(vm.PopupQuickViewVueModal.Id) } }, methods = { backToTop() { if (!document.querySelector(".up-btn")) { const t = document.createElement("div"), e = document.createElement("div"); t.classList.add("up-btn", "up-btn__hide"), document.body.append(t), t.append(e), window.addEventListener("scroll", (() => { var e; e = 400, document.documentElement.scrollTop >= e ? t.classList.remove("up-btn__hide") : t.classList.add("up-btn__hide") })), t.addEventListener("click", (() => { window.scrollTo({ top: 0, behavior: "smooth" }) })) } }, newsletterBox(t, e) { let a; a = !t || this.$refs.newsletterSubscribe.checked; var o = { subscribe: a, email: document.getElementById("newsletter-email").value }; axios({ url: e, params: o, method: "post" }).then((function (t) { let e, a = t.data.Result, o = t.data.ResultCategory, i = t.data.Showcategories; e = t.data.Success ? "info" : "danger", vm.$bvToast.toast(a, { variant: e, autoHideDelay: 3500, solid: !0 }), i && vm.displayPopup(o, "ModalNewsletterCategory") })) }, newsletterSubscribeCategory(t) { let e = document.getElementById("newsletter-category-method-form"), a = new FormData(e); axios({ url: t, method: "post", data: a }).then((function (t) { t.data.Success || alert(t.data.Message) })).catch((function (t) { alert(t) })) }, getPrivacyPreference(t) { axios({ url: t, method: "get" }).then((function (t) { vm.displayPopup(t.data.html, "ModalPrivacyPreference") })).catch((function (t) { alert(t) })) }, savePrivacyPreference(t) { let e = document.getElementById("frmPrivacyPreference"), a = new FormData(e); axios({ url: t, method: "post", data: a }).catch((function (t) { alert(t) })) }, displayPopup(t, e) { new Vue({ el: "#" + e, data: { template: null }, render: function (t) { return this.template ? this.template() : t("b-overlay", { attrs: { show: "true" } }) }, methods: { showModal: function () { this.$refs[e].show() } }, mounted: function () { this.template = Vue.compile(t).render, this.darkMode = vm.darkMode }, updated: function () { this.showModal() } }) }, displayBarNotification(t, e, a, o) { var i; i = "error" == a ? "danger" : "info", this.$bvToast.toast(t, { title: a, variant: i, href: e, autoHideDelay: o, solid: !0 }) }, deletecartitem: function (t) { return axios({ method: "post", baseURL: t }).then((function (t) { const e = t.data.sidebarshoppingcartmodel; vm.flycart = e, vm.flycartitems = e.Items, vm.flycartindicator = e.TotalProducts })).catch((function (t) { alert(t) })), !1 }, updateCompareProductsQty: function () { const t = AxiosCart.getCookie("Grand.CompareProduct"); if ("" !== t) { const e = t.split("|").filter(Boolean).length; this.compareProductsQty = e } else this.compareProductsQty = 0 }, updateSidebarShoppingCart: function (t) { axios({ baseURL: t, method: "get", data: null, headers: { Accept: "application/json", "Content-Type": "application/json" }, showLoader: !1 }).then((t => (this.flycart = t.data, this.flycartitems = t.data.Items, this.flycartindicator = t.data.TotalProducts, this.flycartfirstload = !1))) }, updateWishlist: function (t) { axios({ baseURL: t, method: "get", data: null, headers: { Accept: "application/json", "Content-Type": "application/json" }, showLoader: !1 }).then((t => (this.loader = !1, this.flywish = t.data, this.wishlistitems = t.data.Items, this.wishindicator = t.data.Items.length))) }, getCompareList: function (t) { this.loader = !0, axios({ baseURL: t, method: "get", params: { t: (new Date).getTime() }, data: null, headers: { Accept: "application/json", "Content-Type": "application/json" }, showLoader: !1 }).then((t => { this.loader = !1, this.compareproducts = t.data })) }, removeFromCompareList: function (t, e) { if (void 0 !== t) { const a = AxiosCart.getCookie("Grand.CompareProduct").replace(t, ""); AxiosCart.setCookie("Grand.CompareProduct", a), vm.compareproducts.Products.splice(e, 1) } else AxiosCart.setCookie("Grand.CompareProduct", ""), vm.compareproducts.Products.splice(0); this.updateCompareProductsQty() }, showModalOutOfStock: function () { this.$refs["out-of-stock"].show() }, productImage: function (t) { var e = t.target.parentElement.getAttribute("data-href"); function a(t, e) { for (var a = 0, o = t.length; a < o; a++)if (t[a] == e) return !0; return !1 } var o = function (t, e) { for (var o = document.querySelectorAll(e), i = t.parentNode; i && !a(o, i);)i = i.parentNode; return i }(t.target, ".product-box"); o.querySelectorAll(".main-product-img")[0].setAttribute("src", e) }, formSubmit() { vm.$refs.form.submit() }, formSubmitParam(e, observer) { e && observer && observer.validate().then((success => { if (success) { var submitter = e.target.querySelector('[type="submit"]'); eval(submitter.dataset.form) } })) }, isMobile: function () { return isMobileAgent }, attrchange: function (t, e) { var a, o = document.getElementById("product-details-form"), i = new FormData(o); a = vm.PopupQuickViewVueModal.ProductBundleModels.length > 0 ? vm.PopupQuickViewVueModal.Id : t, axios({ url: "/product/productdetails_attributechange?productId=" + a + "&loadPicture=" + e, data: i, method: "post", params: { product: a } }).then((function (t) { if (vm.PopupQuickViewVueModal.ProductBundleModels.length > 0) t.data.price && (vm.PopupQuickViewVueModal.ProductPrice.Price = t.data.price); else { if (t.data.price && (0 == vm.PopupQuickViewVueModal.ProductType ? null != vm.PopupQuickViewVueModal.ProductPrice.PriceWithDiscount ? vm.PopupQuickViewVueModal.ProductPrice.PriceWithDiscount = t.data.price : vm.PopupQuickViewVueModal.ProductPrice.Price = t.data.price : vm.PopupQuickViewVueModal.AssociatedProducts.find((t => t.Id === a)).ProductPrice.Price = t.data.price), t.data.sku && (vm.PopupQuickViewVueModal.Sku = t.data.sku), t.data.mpn && (vm.PopupQuickViewVueModal.Mpn = t.data.mpn), t.data.gtin && (vm.PopupQuickViewVueModal.Gtin = t.data.gtin), t.data.stockAvailability && (vm.PopupQuickViewVueModal.StockAvailability = t.data.stockAvailability), t.data.enabledattributemappingids) for (var e = 0; e < t.data.enabledattributemappingids.length; e++)document.querySelector("#product_attribute_label_" + t.data.enabledattributemappingids[e]).style.display = "table-cell", document.querySelector("#product_attribute_input_" + t.data.enabledattributemappingids[e]).style.display = "table-cell"; if (t.data.disabledattributemappingids) for (e = 0; e < t.data.disabledattributemappingids.length; e++)document.querySelector("#product_attribute_label_" + t.data.disabledattributemappingids[e]).style.display = "none", document.querySelector("#product_attribute_input_" + t.data.disabledattributemappingids[e]).style.display = "none"; null !== t.data.pictureDefaultSizeUrl && (vm.PopupQuickViewVueModal.DefaultPictureModel.ImageUrl = t.data.pictureDefaultSizeUrl) } })) }, uploadFile: function (t) { var e = new FormData, a = t.getAttribute("data-url"); e.append("image", qqfile.files[0]), axios.post(a, e, { headers: { "Content-Type": "multipart/form-data" } }).then((function (e) { if (e.data.success) { var a = e.data.message, o = e.data.downloadGuid, i = e.data.downloadUrl, r = document.querySelector(".download-file"), d = document.getElementById("download-message"); t.setAttribute("qq-button-id", o), document.querySelector(".hidden-upload-input").value = o, d.style.display = "block", d.classList.remove("alert-danger"), d.classList.add("alert-info"), d.innerText = a, r.style.display = "block", r.children[0].setAttribute("href", i) } else { a = e.data.message; (d = document.getElementById("download-message")).style.display = "block", d.classList.remove("alert-info"), d.classList.add("alert-danger"), d.innerText = a } })) }, initReservationQV: function () { if (null !== vm.PopupQuickViewVueModal && 20 == vm.PopupQuickViewVueModal.ProductType) { var t = vm.PopupQuickViewVueModal.Id, e = vm.PopupQuickViewVueModal.ReservationFullDate, a = vm.PopupQuickViewVueModal.ReservationYear, o = vm.PopupQuickViewVueModal.ReservationMonth; Reservation.init(e, a, o, "No available reservations", "/Product/GetDatesForMonth", t, "/product/productdetails_attributechange?productId=" + t) } }, getLinkedProductsQV: function (t) { axios({ url: "/Product/RelatedProducts", method: "get", params: { productId: t }, headers: { Accept: "application/json", "Content-Type": "application/json" } }).then((function (t) { vm.RelatedProducts = t.data })) }, warehouse_change_handler(t, e) { var a = new FormData; a.append("warehouseId", document.getElementById("WarehouseId").value), a.append("productId", t), axios({ url: e, data: a, method: "post" }).then((function (t) { t.data.stockAvailability && (vm.PopupQuickViewVueModal.StockAvailability = t.data.stockAvailability) })) }, formatDate(t) { var e = new Date(t), a = "" + (e.getMonth() + 1), o = "" + e.getDate(), i = e.getFullYear(); return a.length < 2 && (a = "0" + a), o.length < 2 && (o = "0" + o), [a, o, i].join("/") }, QuickViewShown: function () { var t, e; vm.PopupQuickViewVueModal.ProductAttributes.length > 0 ? vm.attrchange(vm.PopupQuickViewVueModal.Id, !0) : vm.PopupQuickViewVueModal.ProductBundleModels.length > 0 && vm.attrchange(vm.PopupQuickViewVueModal.Id, !0); 20 == vm.PopupQuickViewVueModal.ProductType && (10 == vm.PopupQuickViewVueModal.IntervalUnit ? (null !== vm.PopupQuickViewVueModal.RentalStartDateUtc && (t = this.formatDate(vm.PopupQuickViewVueModal.RentalStartDateUtc), vm.PopupQuickViewVueModal.RentalStartDateUtc = t), null !== vm.PopupQuickViewVueModal.RentalEndDateUtc && (e = this.formatDate(vm.PopupQuickViewVueModal.RentalEndDateUtc), vm.PopupQuickViewVueModal.RentalEndDateUtc = e)) : null !== vm.PopupQuickViewVueModal.RentalStartDateUtc ? vm.PopupQuickViewVueModal.RentalStartDateUtc = this.formatDate(vm.PopupQuickViewVueModal.RentalStartDateUtc) : vm.PopupQuickViewVueModal.RentalStartDateUtc = null) } }); const vm = new Vue({ el: "#app", data: function () { return { show: !1, hover: !1, darkMode: !1, active: !1, NextDropdownVisible: !1, value: 5, flycartfirstload: !0, PopupAddToCartVueModal: null, PopupQuickViewVueModal: null, index: null, RelatedProducts: null, compareproducts: null, compareProductsQty: 0, loader: !1 } }, props: props, mounted: function () { "true" == localStorage.fluid && (this.fluid = "fluid"), "fluid" == localStorage.fluid && (this.fluid = "fluid"), "" == localStorage.fluid && (this.fluid = "false"), "true" == localStorage.darkMode && (this.darkMode = !0), this.wishindicator = parseInt(this.$refs.wishlistQty.innerText), this.updateCompareProductsQty(), this.backToTop() }, watch: watch, created: function () { axios.interceptors.request.use((t => { t.showLoader && (document.getElementById("app").setAttribute("v-cloak", !0), document.querySelector(".page-loader-container").classList.add("axios-request")); return t }), (t => (t.config.showLoader && document.getElementById("app").removeAttribute("v-cloak"), Promise.reject(t)))), axios.interceptors.response.use((t => (t.config.showLoader && document.getElementById("app").removeAttribute("v-cloak"), t)), (t => (t.response.config.showLoader && document.getElementById("app").removeAttribute("v-cloak"), Promise.reject(t)))) }, methods: { backToTop() { if (!document.querySelector(".up-btn")) { const t = document.createElement("div"), e = document.createElement("div"); t.classList.add("up-btn", "up-btn__hide"), document.body.append(t), t.append(e), window.addEventListener("scroll", (() => { var e; e = 400, document.documentElement.scrollTop >= e ? t.classList.remove("up-btn__hide") : t.classList.add("up-btn__hide") })), t.addEventListener("click", (() => { window.scrollTo({ top: 0, behavior: "smooth" }) })) } }, newsletterBox(t, e) { let a; a = !t || this.$refs.newsletterSubscribe.checked; var o = { subscribe: a, email: document.getElementById("newsletter-email").value }; axios({ url: e, params: o, method: "post" }).then((function (t) { let e, a = t.data.Result, o = t.data.ResultCategory, i = t.data.Showcategories; e = t.data.Success ? "info" : "danger", vm.$bvToast.toast(a, { variant: e, autoHideDelay: 3500, solid: !0 }), i && vm.displayPopup(o, "ModalNewsletterCategory") })) }, newsletterSubscribeCategory(t) { let e = document.getElementById("newsletter-category-method-form"), a = new FormData(e); axios({ url: t, method: "post", data: a }).then((function (t) { t.data.Success || alert(t.data.Message) })).catch((function (t) { alert(t) })) }, getPrivacyPreference(t) { axios({ url: t, method: "get" }).then((function (t) { vm.displayPopup(t.data.html, "ModalPrivacyPreference") })).catch((function (t) { alert(t) })) }, savePrivacyPreference(t) { let e = document.getElementById("frmPrivacyPreference"), a = new FormData(e); axios({ url: t, method: "post", data: a }).catch((function (t) { alert(t) })) }, displayPopup(t, e) { new Vue({ el: "#" + e, data: { template: null }, render: function (t) { return this.template ? this.template() : t("b-overlay", { attrs: { show: "true" } }) }, methods: { showModal: function () { this.$refs[e].show() } }, mounted: function () { this.template = Vue.compile(t).render, this.darkMode = vm.darkMode }, updated: function () { this.showModal() } }) }, displayBarNotification(t, e, a, o) { var i; i = "error" == a ? "danger" : "info", this.$bvToast.toast(t, { title: a, variant: i, href: e, autoHideDelay: o, solid: !0 }) }, deletecartitem: function (t) { return axios({ method: "post", baseURL: t }).then((function (t) { const e = t.data.sidebarshoppingcartmodel; vm.flycart = e, vm.flycartitems = e.Items, vm.flycartindicator = e.TotalProducts })).catch((function (t) { alert(t) })), !1 }, updateCompareProductsQty: function () { const t = AxiosCart.getCookie("Grand.CompareProduct"); if ("" !== t) { const e = t.split("|").filter(Boolean).length; this.compareProductsQty = e } else this.compareProductsQty = 0 }, updateSidebarShoppingCart: function (t) { axios({ baseURL: t, method: "get", data: null, headers: { Accept: "application/json", "Content-Type": "application/json" }, showLoader: !1 }).then((t => (this.flycart = t.data, this.flycartitems = t.data.Items, this.flycartindicator = t.data.TotalProducts, this.flycartfirstload = !1))) }, updateWishlist: function (t) { axios({ baseURL: t, method: "get", data: null, headers: { Accept: "application/json", "Content-Type": "application/json" }, showLoader: !1 }).then((t => (this.loader = !1, this.flywish = t.data, this.wishlistitems = t.data.Items, this.wishindicator = t.data.Items.length))) }, getCompareList: function (t) { this.loader = !0, axios({ baseURL: t, method: "get", params: { t: (new Date).getTime() }, data: null, headers: { Accept: "application/json", "Content-Type": "application/json" }, showLoader: !1 }).then((t => { this.loader = !1, this.compareproducts = t.data })) }, removeFromCompareList: function (t, e) { if (void 0 !== t) { const a = AxiosCart.getCookie("Grand.CompareProduct").replace(t, ""); AxiosCart.setCookie("Grand.CompareProduct", a), vm.compareproducts.Products.splice(e, 1) } else AxiosCart.setCookie("Grand.CompareProduct", ""), vm.compareproducts.Products.splice(0); this.updateCompareProductsQty() }, showModalOutOfStock: function () { this.$refs["out-of-stock"].show() }, productImage: function (t) { var e = t.target.parentElement.getAttribute("data-href"); function a(t, e) { for (var a = 0, o = t.length; a < o; a++)if (t[a] == e) return !0; return !1 } var o = function (t, e) { for (var o = document.querySelectorAll(e), i = t.parentNode; i && !a(o, i);)i = i.parentNode; return i }(t.target, ".product-box"); o.querySelectorAll(".main-product-img")[0].setAttribute("src", e) }, formSubmit() { vm.$refs.form.submit() }, formSubmitParam(e, observer) { e && observer && observer.validate().then((success => { if (success) { var submitter = e.target.querySelector('[type="submit"]'); eval(submitter.dataset.form) } })) }, isMobile: function () { return isMobileAgent }, attrchange: function (t, e) { var a, o = document.getElementById("product-details-form"), i = new FormData(o); a = vm.PopupQuickViewVueModal.ProductBundleModels.length > 0 ? vm.PopupQuickViewVueModal.Id : t, axios({ url: "/product/productdetails_attributechange?productId=" + a + "&loadPicture=" + e, data: i, method: "post", params: { product: a } }).then((function (t) { if (vm.PopupQuickViewVueModal.ProductBundleModels.length > 0) t.data.price && (vm.PopupQuickViewVueModal.ProductPrice.Price = t.data.price); else { if (t.data.price && (0 == vm.PopupQuickViewVueModal.ProductType ? null != vm.PopupQuickViewVueModal.ProductPrice.PriceWithDiscount ? vm.PopupQuickViewVueModal.ProductPrice.PriceWithDiscount = t.data.price : vm.PopupQuickViewVueModal.ProductPrice.Price = t.data.price : vm.PopupQuickViewVueModal.AssociatedProducts.find((t => t.Id === a)).ProductPrice.Price = t.data.price), t.data.sku && (vm.PopupQuickViewVueModal.Sku = t.data.sku), t.data.mpn && (vm.PopupQuickViewVueModal.Mpn = t.data.mpn), t.data.gtin && (vm.PopupQuickViewVueModal.Gtin = t.data.gtin), t.data.stockAvailability && (vm.PopupQuickViewVueModal.StockAvailability = t.data.stockAvailability), t.data.enabledattributemappingids) for (var e = 0; e < t.data.enabledattributemappingids.length; e++)document.querySelector("#product_attribute_label_" + t.data.enabledattributemappingids[e]).style.display = "table-cell", document.querySelector("#product_attribute_input_" + t.data.enabledattributemappingids[e]).style.display = "table-cell"; if (t.data.disabledattributemappingids) for (e = 0; e < t.data.disabledattributemappingids.length; e++)document.querySelector("#product_attribute_label_" + t.data.disabledattributemappingids[e]).style.display = "none", document.querySelector("#product_attribute_input_" + t.data.disabledattributemappingids[e]).style.display = "none"; null !== t.data.pictureDefaultSizeUrl && (vm.PopupQuickViewVueModal.DefaultPictureModel.ImageUrl = t.data.pictureDefaultSizeUrl) } })) }, uploadFile: function (t) { var e = new FormData, a = t.getAttribute("data-url"); e.append("image", qqfile.files[0]), axios.post(a, e, { headers: { "Content-Type": "multipart/form-data" } }).then((function (e) { if (e.data.success) { var a = e.data.message, o = e.data.downloadGuid, i = e.data.downloadUrl, r = document.querySelector(".download-file"), d = document.getElementById("download-message"); t.setAttribute("qq-button-id", o), document.querySelector(".hidden-upload-input").value = o, d.style.display = "block", d.classList.remove("alert-danger"), d.classList.add("alert-info"), d.innerText = a, r.style.display = "block", r.children[0].setAttribute("href", i) } else { a = e.data.message; (d = document.getElementById("download-message")).style.display = "block", d.classList.remove("alert-info"), d.classList.add("alert-danger"), d.innerText = a } })) }, initReservationQV: function () { if (null !== vm.PopupQuickViewVueModal && 20 == vm.PopupQuickViewVueModal.ProductType) { var t = vm.PopupQuickViewVueModal.Id, e = vm.PopupQuickViewVueModal.ReservationFullDate, a = vm.PopupQuickViewVueModal.ReservationYear, o = vm.PopupQuickViewVueModal.ReservationMonth; Reservation.init(e, a, o, "No available reservations", "/Product/GetDatesForMonth", t, "/product/productdetails_attributechange?productId=" + t) } }, getLinkedProductsQV: function (t) { axios({ url: "/Product/RelatedProducts", method: "get", params: { productId: t }, headers: { Accept: "application/json", "Content-Type": "application/json" } }).then((function (t) { vm.RelatedProducts = t.data })) }, warehouse_change_handler(t, e) { var a = new FormData; a.append("warehouseId", document.getElementById("WarehouseId").value), a.append("productId", t), axios({ url: e, data: a, method: "post" }).then((function (t) { t.data.stockAvailability && (vm.PopupQuickViewVueModal.StockAvailability = t.data.stockAvailability) })) }, formatDate(t) { var e = new Date(t), a = "" + (e.getMonth() + 1), o = "" + e.getDate(), i = e.getFullYear(); return a.length < 2 && (a = "0" + a), o.length < 2 && (o = "0" + o), [a, o, i].join("/") }, QuickViewShown: function () { var t, e; vm.PopupQuickViewVueModal.ProductAttributes.length > 0 ? vm.attrchange(vm.PopupQuickViewVueModal.Id, !0) : vm.PopupQuickViewVueModal.ProductBundleModels.length > 0 && vm.attrchange(vm.PopupQuickViewVueModal.Id, !0); 20 == vm.PopupQuickViewVueModal.ProductType && (10 == vm.PopupQuickViewVueModal.IntervalUnit ? (null !== vm.PopupQuickViewVueModal.RentalStartDateUtc && (t = this.formatDate(vm.PopupQuickViewVueModal.RentalStartDateUtc), vm.PopupQuickViewVueModal.RentalStartDateUtc = t), null !== vm.PopupQuickViewVueModal.RentalEndDateUtc && (e = this.formatDate(vm.PopupQuickViewVueModal.RentalEndDateUtc), vm.PopupQuickViewVueModal.RentalEndDateUtc = e)) : null !== vm.PopupQuickViewVueModal.RentalStartDateUtc ? vm.PopupQuickViewVueModal.RentalStartDateUtc = this.formatDate(vm.PopupQuickViewVueModal.RentalStartDateUtc) : vm.PopupQuickViewVueModal.RentalStartDateUtc = null) } } });